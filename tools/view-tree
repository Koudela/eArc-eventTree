#!/usr/bin/php
<?php

use eArc\DI\DI;
use eArc\EventTree\Exceptions\InvalidObserverNodeException;
use eArc\EventTree\Interfaces\SortableListenerInterface;
use eArc\EventTree\Transformation\ObserverTree;use eArc\EventTree\Util\CompositeDir;
use eArc\EventTree\Interfaces\PhaseSpecificListenerInterface;

$vendorDir = dirname(__DIR__).'/vendor';

if (!is_dir($vendorDir)) {
    $vendorDir = dirname(__DIR__, 3);
}

require_once $vendorDir.'/autoload.php';

$directories = [];

for ($i = 1; $i < count($argv); $i += 2) {
    $directories[$argv[$i]] = $argv[$i+1];
}

DI::init();
di_import_param(['earc' => [
    'vendor_directory' => $vendorDir,
    'event_tree' => ['directories' => $directories],
]]);


function eventPhasesToString(int $eventPhases): string
{
    if (ObserverTree::PHASE_ACCESS === $eventPhases) {
        return 'access';
    }

    $arr = [];

    if (ObserverTree::PHASE_START & $eventPhases) {
        $arr[] = 'start';
    }

    if (ObserverTree::PHASE_BEFORE & $eventPhases) {
        $arr[] = 'before';
    }

    if (ObserverTree::PHASE_DESTINATION & $eventPhases) {
        $arr[] = 'destination';
    }

    if (ObserverTree::PHASE_BEYOND & $eventPhases) {
        $arr[] = 'beyond';
    }

    return implode(' | ', $arr);
}

/**
 * @param string $path
 * @param string $namespace
 * @param int    $indent
 *
 * @throws InvalidObserverNodeException
 */
function iteratePath(string $path, string $namespace, int $indent): void
{
    foreach (CompositeDir::getSubDirNames($path) as $name) {
        $newPath = $path !== './' ? $path.'/'.$name : $name;
        $newNamespace = $path !== './' ? $namespace.'\\'.$name : $name;

        echo str_pad('', $indent*4, ' ').$name."\n";

        foreach (CompositeDir::collectListener($newPath, $newNamespace) as $listener) {
            echo str_pad('', $indent*4+2, '    ').'- ';
            $phase = eventPhasesToString(is_subclass_of($listener, PhaseSpecificListenerInterface::class) ? $listener::getPhase() : ObserverTree::PHASE_ACCESS);
            $patience = is_subclass_of($listener, SortableListenerInterface::class) ? $listener::getPatience() : 0;
            echo "[$phase, $patience] ".$listener."\n";
        }

        echo "\n";

        iteratePath($newPath, $newNamespace, $indent+1);
    }
}

$path = './';
$namespace = '';

iteratePath($path, $namespace, 0);
